
> Embryo:
> Embryo.h:89
> "/** Float to Embryo_Cell */
> #define EMBRYO_FLOAT_TO_CELL(f) ((Embryo_Float_Cell) f).c
> /** Embryo_Cell to float */
> #define EMBRYO_CELL_TO_FLOAT(c) ((Embryo_Float_Cell) c).f
> "
>
> I changed to:
> "#ifndef _MSC_VER
>
> /** Float to Embryo_Cell */
> #define EMBRYO_FLOAT_TO_CELL(f) ((Embryo_Float_Cell) f).c
> /** Embryo_Cell to float */
> #define EMBRYO_CELL_TO_FLOAT(c) ((Embryo_Float_Cell) c).f
>
> #else
>
> /** Float to Embryo_Cell */
> #define EMBRYO_FLOAT_TO_CELL(f) (*(Embryo_Cell *)&(f))
> /** Embryo_Cell to float */
> #define EMBRYO_CELL_TO_FLOAT(c) (*(float *)&(c))
>
> #endif"
>
> MSVC compiler didnt want to do conversion into the union, and as I
> understood we need here simple reinterpretation of bits.

in that case, maybe it would be best to change the behavior with gcc. One
change for both compiler. I have to check that.

>
> Embryo_private.h:6
>
> It should be stressed, that #include <unistd.h> should always follow
> #include <sys/types.h>, because off_t is defined in the second heard,
> and is used in the first. Also I've added #include <ansidecl.h> into
> line 10, for __attribute__ macro.

if there is an __attribute__ macro without guard, it's en arror. I'll
check that.

> Embryo_str.h:6
> Should be:
> "
> #ifndef _MSC_VER
> #include <fnmatch.h>
> #endif

no. Better:

in win32/, create a subdir named 'common'. In that subdir, we should
provide the fnmatch.h file. Remark that in that subir, we could provide a
config.h file, so that it configures some things like with the autotools.
It is done like that in gstreamer and i like it.

> #ifdef HAVE_EVIL
> #include <Evil.h>
> #endif
> "

maybe then evil is not necessary. I don't know.

> Embryo_time:6
> Should be:
> "#ifdef _WIN32
> #include <sys/timeb.h>
> #else
> #include <sys/time.h>
> #endif
> #include <time.h>
>
> #ifdef HAVE_EVIL
> #include <Evil.h>
> #endif
> "

it works for mingw, so it's definitely not _WIN32. Hmmm I need to check
why sys/time is needed. If it's for gettimeofday, maybe something else can
be done.

> Also in Evil we need to add gettimeofday function. I've added a plug for now.

yes, I know. I have a function somewhere that does that. i can't remember
where, though.

> ---------------------
>
> Evas:
> Evas_common.h:39
> "# define LK(x)    /##/"
> I've already noted this, but again

yes. I need to talk to raster about that/

> line 51 "#include <unistd.h>" move to 55 after "#include <sys/types.h>".

these headers need refactorizing.

> lines 1274-1315 need EAPI, otherwise we get error "<symbol> redefinition; different linkage", because they are defined later with __declspec(dllexport).

yes, i have to add them.

>
> And Evas static libs. First of all they should be compiled together with
> libevas into one dll with symbol export, I see such approach first
> time, I guess we need to change Linker->General->Use Library
> Dependency Inputs switch to "Yes".

maybe 2 vcproj ? one for static, one for dll ?

> Here is the information from MSDN:
> "Use Library Dependency Inputs
> In a large project, when a dependent project produces a .lib file, incremental linking is disabled. If there are many dependent projects that produce .lib files, building the application can take a long time. When this property is set to Yes, the project system links in the .obj files for .libs produced by dependent projects, thus enabling incremental linking."
> I suppose this will link rather objs than libs. Without this switch libevas.dll doesnt export any cache, data, etc. functions. But I couldnt check yet if it will export with it, because it's necessary to build all libs first.
>
> Cache, Canvas and Data are ok.
>
> I wonder what is "engines" how many projects should be created for this directory?

one vcproj (a dll, actually, and only a dll, no need to have a static lib)
per engine. So in engines/ no vcproj. But one vcproj for each subdir that
will be compiled on windows. Note that the names of the dll must be
module.dll, but must be installed in a specific directory.

that's for src/modules/engines. See below.

> common, common16 and evas_op_add evas_op_blend evas_op_copy evas_op_mask evas_op_mul evas_op_sub, yes?

hmm, engines in src/lib ?? if so, no vcproj. The .c files must be in the
vcproj of libevas.

> File:
> Evas_module.c:1
> Should be
> "#ifdef HAVE_CONFIG_H
> #include <config.h>
> #endif"

ok

> Evas_path.c:18
> "#ifndef _MSC_VER
> #include <fnmatch.h>
> #endif
> #include <dirent.h>

no. See above.

> #ifdef HAVE_EVIL
> # include <Evil.h>
> #endif
> "

maybe.

> And here I stopped. There is no <dirent.h> in MSVC CRT includes.
> Probably I should compile this file with _WIN32_WCE switch? However the
> platform is not CE. Or we need to provide missing entries in Evil.

if so, we need to add guard from the autotools. Arg, so many things to do
:/

